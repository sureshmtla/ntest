import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';

@Component({
  selector: 'app-dynamic-form',
  templateUrl: './dynamic-form.component.html',
})
export class DynamicFormComponent implements OnInit {
  form: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit() {
    this.form = this.fb.group({
      Dataflows: this.fb.array([])
    });

    // Load dynamic JSON into the form
    this.loadJsonToForm(this.sampleJson);
  }

  // Sample dynamic JSON
  sampleJson = {
    Dataflows: [
      {
        Sources: [
          {
            stype: "sql",
            Tasks: [
              {
                name: "task1",
                query: "*",
                schema: "db",
                Subtasks: [
                  { id: "sb456", name: "sbt", query: "*" },
                  { id: "sb457", name: "sbt2", query: "*" }
                ]
              },
              { name: "task2", query: "*", schema: "db" }
            ]
          }
        ],
        Transformations: [
          { query: "*", name: "tr", extraField: "value1" }, // Example dynamic field
          { query: "*", name: "tr2", extraField2: "value2" } // Another dynamic field
        ],
        Sinks: [
          {
            sTyle: "sql",
            Tasks: [
              { name: "tks1", query: "*" },
              { name: "tks2", query: "*" }
            ]
          }
        ]
      }
    ]
  };

  // Parse JSON to create a dynamic form structure
  loadJsonToForm(json: any) {
    const dataflows = this.form.get('Dataflows') as FormArray;
    json.Dataflows.forEach((dataflow: any) => {
      dataflows.push(this.fb.group({
        Sources: this.fb.array(dataflow.Sources.map((source: any) => this.createDynamicGroup(source))),
        Transformations: this.fb.array(dataflow.Transformations.map((transformation: any) =>
          this.createDynamicGroup(transformation)
        )),
        Sinks: this.fb.array(dataflow.Sinks.map((sink: any) => this.createDynamicGroup(sink)))
      }));
    });
  }

  // Create a dynamic FormGroup based on the fields in the object
  createDynamicGroup(data: any): FormGroup {
    const group = this.fb.group({});
    Object.keys(data).forEach(key => {
      if (Array.isArray(data[key])) {
        // Handle nested arrays as FormArray
        group.addControl(key, this.fb.array(data[key].map((item: any) => this.createDynamicGroup(item))));
      } else {
        // Add a FormControl for each field
        group.addControl(key, new FormControl(data[key]));
      }
    });
    return group;
  }

  // Get the JSON output from the form
  getJson() {
    console.log(this.form.value);
    return this.form.value;
  }

  // Helper to access Dataflows FormArray
  get dataflows(): FormArray {
    return this.form.get('Dataflows') as FormArray;
  }
}





<form [formGroup]="form">
  <div formArrayName="Dataflows">
    <div *ngFor="let dataflow of dataflows.controls; let i = index" [formGroupName]="i">
      <h3>Dataflow {{ i + 1 }}</h3>

      <!-- Dynamic Sources -->
      <div formArrayName="Sources">
        <div *ngFor="let source of (dataflow.get('Sources') as FormArray).controls; let j = index" [formGroupName]="j">
          <div *ngFor="let key of objectKeys(source.value)">
            <label>{{ key }}:</label>
            <input *ngIf="!isArray(source.value[key])" [formControlName]="key" />
            <div *ngIf="isArray(source.value[key])" formArrayName="{{ key }}">
              <div *ngFor="let subField of (source.get(key) as FormArray).controls; let k = index" [formGroupName]="k">
                <div *ngFor="let subKey of objectKeys(subField.value)">
                  <label>{{ subKey }}:</label>
                  <input [formControlName]="subKey" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Dynamic Transformations -->
      <div formArrayName="Transformations">
        <div *ngFor="let transformation of (dataflow.get('Transformations') as FormArray).controls; let m = index" [formGroupName]="m">
          <div *ngFor="let key of objectKeys(transformation.value)">
            <label>{{ key }}:</label>
            <input [formControlName]="key" />
          </div>
        </div>
      </div>

      <!-- Dynamic Sinks -->
      <div formArrayName="Sinks">
        <div *ngFor="let sink of (dataflow.get('Sinks') as FormArray).controls; let n = index" [formGroupName]="n">
          <div *ngFor="let key of objectKeys(sink.value)">
            <label>{{ key }}:</label>
            <input *ngIf="!isArray(sink.value[key])" [formControlName]="key" />
            <div *ngIf="isArray(sink.value[key])" formArrayName="{{ key }}">
              <div *ngFor="let subField of (sink.get(key) as FormArray).controls; let p = index" [formGroupName]="p">
                <div *ngFor="let subKey of objectKeys(subField.value)">
                  <label>{{ subKey }}:</label>
                  <input [formControlName]="subKey" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</form>

<button (click)="getJson()">Get JSON</button>
